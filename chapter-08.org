#+TITLE: Writing Tests

#+PROPERTY: header-args:haskell :results replace output
#+PROPERTY: header-args:haskell+ :noweb yes
#+PROPERTY: header-args:haskell+ :wrap EXAMPLE

- Writing code and developing with tests in mind.
- Unit tests, property tests, characterization tests, and other approaches to
  testing.
- Improving code quality.

#+BEGIN_QUOTE
Haskell type system has limits of what it can prove, you still need tests to be
closer to software correctness.
#+END_QUOTE

* 8.1 Context: IPv4 filtering application
Given a list of IP ranges we need to check if a specific IP is included in at
least one of those ranges.

Format of the input

#+BEGIN_EXAMPLE
192.168.1.3,192.168.10.14
127.0.0.1,127.0.0.255
220.41.240.89,220.41.241.115
4.159.29.233,5.159.30.77
62.70.22.158,62.70.24.18
#+END_EXAMPLE

** Initial implementation

#+NAME: ip-types
#+BEGIN_SRC haskell :results none
:set -XDeriveAnyClass

import Data.Word (Word32)
import Control.Exception (Exception)

newtype IP = IP {unIP :: Word32} deriving (Eq, Ord, Show)

data IPRange = IPRange IP IP deriving Eq

newtype IPRanges = IPRanges [IPRange] deriving Eq

-- Parsing errors and exceptions

type LineNumber = Int

newtype ParseError = ParseError LineNumber deriving (Eq, Show)

:{
data InvalidArgumentException = IPRangeError ParseError
                              | InvalidIP String
                              deriving Exception

instance Show InvalidArgumentException where
  show (IPRangeError (ParseError line)) =
           "Error loading IP range (line: " ++ show line ++ ")"
  show (InvalidIP s) =
           "Invalid IP address: " ++ s
:}
#+END_SRC

#+NAME: ip-parsing
#+BEGIN_SRC haskell :results none
<<ip-types>>

import Data.Text (splitOn, Text, pack, unpack)
import Text.Read (readMaybe)
import Data.Word
import Control.Applicative
import Control.Monad

:set -XOverloadedStrings

:{
guarded :: Alternative f => (a -> Bool) -> a -> f a
guarded f a = if f a then pure a else empty
:}

:{
buildIP :: [Word8] -> IP
buildIP = IP . fst . foldr go (0, 1)
  where go b (s, k) = (s + fromIntegral b * k, k * 256)
:}

:{
isLengthOf :: Int -> [a] -> Bool
isLengthOf n xs = length xs == n
:}

:{
parseIP :: String -> Maybe IP
parseIP = guarded (4 `isLengthOf`) . splitOn "." . pack
          >=> mapM (readMaybe . unpack >=> guarded fistsOctet)
          >=> pure . buildIP
  where fistsOctet x = 0 <= x && x <= 255
:}

:{
parseIPRange :: String -> Maybe IPRange
parseIPRange = guarded (2 `isLengthOf`) . splitOn "," . pack
                >=> mapM (parseIP . unpack)
                >=> listToIPRange
  where
    listToIPRange [a, b] = pure $ IPRange a b
    listToIPRange _ = empty
:}

:{
parseIPRanges :: String -> Either ParseError IPRanges
parseIPRanges = fmap IPRanges . mapM parseLine . zip [1..] . lines
  where
    parseLine :: (Int, String) -> Either ParseError IPRange
    parseLine (n, s) = case parseIPRange s of
                         (Just x) -> Right x
                         Nothing -> Left $ ParseError n
:}
#+END_SRC

#+NAME: ip-lookup
#+BEGIN_SRC haskell :results none
<<ip-parsing>>

import Data.List (any)

:{
lookupIP :: IPRanges -> IP -> Bool
lookupIP (IPRanges ranges) ip = any (inRange ip) ranges
  where
    inRange ip (IPRange l r) = l <= ip && ip <= r
:}

-- utility

:{
reportIPs :: IPRanges -> [IP] -> String
reportIPs iprs = unlines . map go
  where
    go ip = show ip ++ ": " ++ (yesno $ lookupIP iprs ip)
    yesno True = "YES"
    yesno False = "NO"
:}
#+END_SRC

#+NAME: ip-main
#+BEGIN_SRC haskell :results none
<<ip-lookup>>

import Options.Applicative
import Control.Monad.Catch

data Params = Params FilePath String

:{
mkParams :: Parser Params
mkParams = Params
           <$> argument str (metavar "FILE" <> help "IP range database")
           <*> argument str (metavar "IP" <> help "IP address to check")
:}

:{
run :: Params -> IO ()
run (Params fp s) = do
  iprs <- parseIPRanges <$> readFile fp
  case (iprs, parseIP s) of
    (_, Nothing) -> throwM $ InvalidIP s
    (Left e, _) -> throwM $ IPRangeError e
    (Right db, Just ip) -> putStrLn $ reportIPs db [ip]
:}

-- ASK: what is `ExitCode` in `parseExit` in the book? It doesn't work

:{
main :: IO ()
main = (execParser opts >>= run) `catches` [Handler parserExit]
  where
    opts = info (mkParams <**> helper)
                (fullDesc <> progDesc ("YES/NO if an IP belogs to one of the IP ranges"))
    parserExit :: InvalidArgumentException -> IO ()
    parserExit _ = pure ()
:}
#+END_SRC

* 8.2 Testing IPv4 filtering application

** Unit Testing
#+BEGIN_SRC haskell
import Test.Tasty

main = defaultMain $ testGroup "nothing yet" []

main
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE

All 0 tests passed (0.00s)
,*** Exception: ExitSuccess
#+END_EXAMPLE

Lets test ~buildIP~ function

#+BEGIN_SRC haskell
<<ip-lookup>>

import Test.Tasty
import Test.Hspec
import Test.Tasty.Hspec

:{
spec_buildIP :: Spec
spec_buildIP =
  describe "buildIP" $ do
    it "builds from zero" $
      buildIP [0,0,0,0] `shouldBe` (IP 0)
    it "builds from one" $
      buildIP [0,0,0,1] `shouldBe` (IP 1)
    it "builds from localhost" $
      buildIP [127,0,0,1] `shouldBe` (IP $ 1 + 127 * 256^3)
    it "builds from arbitrary address" $
      buildIP [192,168,3,15] `shouldBe` (IP $ 15 + 3 * 256 + 168 * 256^2 + 192 * 256^3)
:}

:{
spec_lookupIP :: Spec
spec_lookupIP =
  describe "lookupIP" $ do
  let empty_iprdb = IPRanges []
      sample_iprdb = IPRanges [ IPRange (IP 0) (IP 1)
                              , IPRange (IP 100) (IP 120)
                              ]
      ip1 = IP 110
      ip2 = IP 50
  it "no IP in empty list" $
    ip1 `shouldNotSatisfy` lookupIP empty_iprdb
  it "IP in sample list" $
    ip1 `shouldSatisfy` lookupIP sample_iprdb
  it "no IP in sample list" $
    ip2 `shouldNotSatisfy` lookupIP sample_iprdb
:}

:{
main = do
  specs <- concat <$> mapM testSpecs [ spec_buildIP, spec_lookupIP ]
  defaultMain $ testGroup "All Tests" specs
:}

main
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
All Tests
  buildIP
    builds from zero:              OK
    builds from one:               OK
    builds from localhost:         OK
    builds from arbitrary address: OK
  lookupIP
    no IP in empty list:           OK
    IP in sample list:             OK
    no IP in sample list:          OK

All 7 tests passed (0.00s)
,*** Exception: ExitSuccess
#+END_EXAMPLE

** Property Based Testing

#+BEGIN_SRC haskell
<<ip-lookup>>

import Hedgehog
import qualified Hedgehog.Gen as Gen
import qualified Hedgehog.Range as Range

import Test.Tasty
import Test.Tasty.Hedgehog

import Data.List (intersperse)

-- Generator

:{
genIP :: Gen IP
genIP = IP <$> Gen.word32 Range.linearBounded
:}

-- NOTE: second one must be greater than first one

:{
genIPRange :: Gen IPRange
genIPRange = do
  (IP ip1) <- genIP
  ip2 <- Gen.word32 (Range.linearFrom (ip1 + 1) ip1 maxBound)
  pure $ IPRange (IP ip1) (IP ip2)
:}

Gen.sample genIP
Gen.sample genIPRange

:{
instance Show IP where
  show (IP ip) = concat $ intersperse "." $ map show [b4,b3,b2,b1]
    where
      (ip1, b1) = ip `divMod` 256
      (ip2, b2) = ip1 `divMod` 256
      (b4, b3) = ip2 `divMod` 256
:}

:{
prop_parseIP :: Property
prop_parseIP  = property $ do
  ip <- forAll genIP
  tripping ip show parseIP
:}

:{
main = do
  defaultMain $ testGroup "All Tests"
    [
      testProperty "parseIP agrees with show" prop_parseIP
    ]
:}

main
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
IP {unIP = 522532552}
All Tests
  parseIP agrees with show: OK
      âœ“ <interactive> passed 100 tests.

All 1 tests passed (0.00s)
,*** Exception: ExitSuccess
#+END_EXAMPLE


** Characterization Testing (Golden Master)
Using ~tasty~ and ~tasty-golden~

#+BEGIN_SRC haskell :eval never
import Test.Tasty
import Test.Tasty.Golden

import System.FilePath (normalise, takeBaseName, replaceExtension)

testsDir = normalise "data/tests/iplookup/"

-- Create a test case for every *.iprs file in a directory

:{
golden_lookupIP :: IO TestTree
golden_lookupIP = testGroup "lookupIP" . map createTest
                  <$> findByExtension [".iprs"] testsDir
:}

-- goldenVsFile :: TestName -> FilePath -> FilePath -> IO () -> TestTree

:{
createTest :: String -> TestTree
createTest fn = goldenVsFile
                (takeBaseName fn) -- test name
                goldenFn          -- golden file name
                outFn             -- output file name
                testAction        -- an action (IO ()) that creates the output file
  where
    ipsFn = replaceExtension fn ".ips"
    goldenFn = replaceExtension fn ".out.golden"
    outFn = replaceExtension fn ".out"
    testAction = do
      iprs <- parseValidIPRanges <$> readFile fn
      ips <- parseValidIPs <$> readFile ipsFn
      writeBinaryFile outFn $ reportIPs iprs ips
:}
#+END_SRC

* 8.3 Other approaches to testing

** Doctest
  #+BEGIN_SRC haskell :eval never
  -- | Parses the IP address given as a 'String'
  --
  -- >>> parseIP "0.0.0.0"
  -- Just 0.0.0.0
  --
  -- >>> parseIP "192.168.1.1"
  -- Just 192.168.1.1
  --
  -- >>> parseIP "not a valid IP"
  -- Nothing
  #+END_SRC

** LiquidHaskell
Lightweight brings refinement types to Haskell. Refinement types means to extend
Haskell types with some information in the form of /logically quantified
predicates/

Ex. ~Nat~ type is the ~Int~ type with a predicate

#+BEGIN_EXAMPLE
type NAT = {n: Int | n >= 0}
#+END_EXAMPLE

LiquidHaskell is implemented as a standalone application, the application
analyzes comments in Haskell code in the form of ~{-@ ... @-}~ with refined
information on types of functions and checks the code against those refinements.

#+BEGIN_SRC haskell :eval never
{-@ v :: Nat @-}
v :: Int
v = 42
#+END_SRC

** HLint
Standalone application who reads Haskell code and provides recommendations on
how to improve it.

* Recap
- Testing is crucial for code quality
- Unit testing works by specifying examples and expected results
- Property testing works by checking properties between inputs and/or outputs
- Golden testing works by checking that the "recorded observable behaviour" of
  the programs stays the same
- Testing can discover errors but cannot prove correctness

* Exercises
- Take some existing OS projects and describe how they did their tests
- Take some existing OS projects and add some tests
